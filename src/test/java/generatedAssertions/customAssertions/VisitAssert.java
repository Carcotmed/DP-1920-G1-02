package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Visit;

/**
 * {@link Visit} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class VisitAssert extends AbstractObjectAssert<VisitAssert, Visit> {

  /**
   * Creates a new <code>{@link VisitAssert}</code> to make assertions on actual Visit.
   * @param actual the Visit we want to make assertions on.
   */
  public VisitAssert(Visit actual) {
    super(actual, VisitAssert.class);
  }

  /**
   * An entry point for VisitAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myVisit)</code> and get specific assertion with code completion.
   * @param actual the Visit we want to make assertions on.
   * @return a new <code>{@link VisitAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static VisitAssert assertThat(Visit actual) {
    return new VisitAssert(actual);
  }

  /**
   * Verifies that the actual Visit's bringer is equal to the given one.
   * @param bringer the given bringer to compare the actual Visit's bringer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's bringer is not equal to the given one.
   */
  public VisitAssert hasBringer(String bringer) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bringer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualBringer = actual.getBringer();
    if (!Objects.areEqual(actualBringer, bringer)) {
      failWithMessage(assertjErrorMessage, actual, bringer, actualBringer);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit's date is equal to the given one.
   * @param date the given date to compare the actual Visit's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's date is not equal to the given one.
   */
  public VisitAssert hasDate(java.time.LocalDate date) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualDate = actual.getDate();
    if (!Objects.areEqual(actualDate, date)) {
      failWithMessage(assertjErrorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit's description is equal to the given one.
   * @param description the given description to compare the actual Visit's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's description is not equal to the given one.
   */
  public VisitAssert hasDescription(String description) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit's id is equal to the given one.
   * @param id the given id to compare the actual Visit's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's id is not equal to the given one.
   */
  public VisitAssert hasId(Integer id) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit's intervention is equal to the given one.
   * @param intervention the given intervention to compare the actual Visit's intervention to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's intervention is not equal to the given one.
   */
  public VisitAssert hasIntervention(org.springframework.samples.petclinic.model.Intervention intervention) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting intervention of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Intervention actualIntervention = actual.getIntervention();
    if (!Objects.areEqual(actualIntervention, intervention)) {
      failWithMessage(assertjErrorMessage, actual, intervention, actualIntervention);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit is not new.
   */
  public VisitAssert isNew() {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Visit is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit is new.
   */
  public VisitAssert isNotNew() {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Visit is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Visit's pet is equal to the given one.
   * @param pet the given pet to compare the actual Visit's pet to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Visit's pet is not equal to the given one.
   */
  public VisitAssert hasPet(org.springframework.samples.petclinic.model.Pet pet) {
    // check that actual Visit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Pet actualPet = actual.getPet();
    if (!Objects.areEqual(actualPet, pet)) {
      failWithMessage(assertjErrorMessage, actual, pet, actualPet);
    }

    // return the current assertion for method chaining
    return this;
  }

}
