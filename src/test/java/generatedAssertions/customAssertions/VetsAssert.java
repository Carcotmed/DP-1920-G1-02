package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.springframework.samples.petclinic.model.Vet;
import org.springframework.samples.petclinic.model.Vets;

/**
 * {@link Vets} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class VetsAssert extends AbstractObjectAssert<VetsAssert, Vets> {

  /**
   * Creates a new <code>{@link VetsAssert}</code> to make assertions on actual Vets.
   * @param actual the Vets we want to make assertions on.
   */
  public VetsAssert(Vets actual) {
    super(actual, VetsAssert.class);
  }

  /**
   * An entry point for VetsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myVets)</code> and get specific assertion with code completion.
   * @param actual the Vets we want to make assertions on.
   * @return a new <code>{@link VetsAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static VetsAssert assertThat(Vets actual) {
    return new VetsAssert(actual);
  }

  /**
   * Verifies that the actual Vets's vetList contains the given Vet elements.
   * @param vetList the given elements that should be contained in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList does not contain all given Vet elements.
   */
  public VetsAssert hasVetList(Vet... vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet varargs is not null.
    if (vetList == null) failWithMessage("Expecting vetList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVetList(), vetList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets's vetList contains the given Vet elements in Collection.
   * @param vetList the given elements that should be contained in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList does not contain all given Vet elements.
   */
  public VetsAssert hasVetList(java.util.Collection<? extends Vet> vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet collection is not null.
    if (vetList == null) {
      failWithMessage("Expecting vetList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVetList(), vetList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets's vetList contains <b>only</b> the given Vet elements and nothing else in whatever order.
   * @param vetList the given elements that should be contained in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList does not contain all given Vet elements.
   */
  public VetsAssert hasOnlyVetList(Vet... vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet varargs is not null.
    if (vetList == null) failWithMessage("Expecting vetList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVetList(), vetList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets's vetList contains <b>only</b> the given Vet elements in Collection and nothing else in whatever order.
   * @param vetList the given elements that should be contained in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList does not contain all given Vet elements.
   */
  public VetsAssert hasOnlyVetList(java.util.Collection<? extends Vet> vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet collection is not null.
    if (vetList == null) {
      failWithMessage("Expecting vetList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVetList(), vetList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets's vetList does not contain the given Vet elements.
   *
   * @param vetList the given elements that should not be in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList contains any given Vet elements.
   */
  public VetsAssert doesNotHaveVetList(Vet... vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet varargs is not null.
    if (vetList == null) failWithMessage("Expecting vetList parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVetList(), vetList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets's vetList does not contain the given Vet elements in Collection.
   *
   * @param vetList the given elements that should not be in actual Vets's vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList contains any given Vet elements.
   */
  public VetsAssert doesNotHaveVetList(java.util.Collection<? extends Vet> vetList) {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // check that given Vet collection is not null.
    if (vetList == null) {
      failWithMessage("Expecting vetList parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVetList(), vetList.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vets has no vetList.
   * @return this assertion object.
   * @throws AssertionError if the actual Vets's vetList is not empty.
   */
  public VetsAssert hasNoVetList() {
    // check that actual Vets we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have vetList but had :\n  <%s>";

    // check
    if (actual.getVetList().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVetList());
    }

    // return the current assertion for method chaining
    return this;
  }


}
