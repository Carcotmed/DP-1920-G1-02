package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Product;

/**
 * {@link Product} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ProductAssert extends AbstractObjectAssert<ProductAssert, Product> {

  /**
   * Creates a new <code>{@link ProductAssert}</code> to make assertions on actual Product.
   * @param actual the Product we want to make assertions on.
   */
  public ProductAssert(Product actual) {
    super(actual, ProductAssert.class);
  }

  /**
   * An entry point for ProductAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myProduct)</code> and get specific assertion with code completion.
   * @param actual the Product we want to make assertions on.
   * @return a new <code>{@link ProductAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ProductAssert assertThat(Product actual) {
    return new ProductAssert(actual);
  }

  /**
   * Verifies that the actual Product's allAvailable is equal to the given one.
   * @param allAvailable the given allAvailable to compare the actual Product's allAvailable to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's allAvailable is not equal to the given one.
   */
  public ProductAssert hasAllAvailable(Boolean allAvailable) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting allAvailable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualAllAvailable = actual.getAllAvailable();
    if (!Objects.areEqual(actualAllAvailable, allAvailable)) {
      failWithMessage(assertjErrorMessage, actual, allAvailable, actualAllAvailable);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's enabled is equal to the given one.
   * @param enabled the given enabled to compare the actual Product's enabled to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's enabled is not equal to the given one.
   */
  public ProductAssert hasEnabled(Boolean enabled) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting enabled of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualEnabled = actual.getEnabled();
    if (!Objects.areEqual(actualEnabled, enabled)) {
      failWithMessage(assertjErrorMessage, actual, enabled, actualEnabled);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's id is equal to the given one.
   * @param id the given id to compare the actual Product's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's id is not equal to the given one.
   */
  public ProductAssert hasId(Integer id) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's name is equal to the given one.
   * @param name the given name to compare the actual Product's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's name is not equal to the given one.
   */
  public ProductAssert hasName(String name) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product is not new.
   */
  public ProductAssert isNew() {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Product is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product is new.
   */
  public ProductAssert isNotNew() {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Product is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's price is equal to the given one.
   * @param price the given price to compare the actual Product's price to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's price is not equal to the given one.
   */
  public ProductAssert hasPrice(Double price) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting price of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualPrice = actual.getPrice();
    if (!Objects.areEqual(actualPrice, price)) {
      failWithMessage(assertjErrorMessage, actual, price, actualPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's price is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param price the value to compare the actual Product's price to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's price is not close enough to the given value.
   */
  public ProductAssert hasPriceCloseTo(Double price, Double assertjOffset) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    Double actualPrice = actual.getPrice();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting price:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualPrice, price, assertjOffset, Math.abs(price - actualPrice));

    // check
    Assertions.assertThat(actualPrice).overridingErrorMessage(assertjErrorMessage).isCloseTo(price, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's provider is equal to the given one.
   * @param provider the given provider to compare the actual Product's provider to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's provider is not equal to the given one.
   */
  public ProductAssert hasProvider(org.springframework.samples.petclinic.model.Provider provider) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting provider of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Provider actualProvider = actual.getProvider();
    if (!Objects.areEqual(actualProvider, provider)) {
      failWithMessage(assertjErrorMessage, actual, provider, actualProvider);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Product's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual Product's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's quantity is not equal to the given one.
   */
  public ProductAssert hasQuantity(Integer quantity) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantity = actual.getQuantity();
    if (!Objects.areEqual(actualQuantity, quantity)) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return this;
  }

}
