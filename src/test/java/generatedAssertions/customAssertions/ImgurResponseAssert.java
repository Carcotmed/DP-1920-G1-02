package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.api.ImgurResponse;

/**
 * {@link ImgurResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ImgurResponseAssert extends AbstractObjectAssert<ImgurResponseAssert, ImgurResponse> {

  /**
   * Creates a new <code>{@link ImgurResponseAssert}</code> to make assertions on actual ImgurResponse.
   * @param actual the ImgurResponse we want to make assertions on.
   */
  public ImgurResponseAssert(ImgurResponse actual) {
    super(actual, ImgurResponseAssert.class);
  }

  /**
   * An entry point for ImgurResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myImgurResponse)</code> and get specific assertion with code completion.
   * @param actual the ImgurResponse we want to make assertions on.
   * @return a new <code>{@link ImgurResponseAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ImgurResponseAssert assertThat(ImgurResponse actual) {
    return new ImgurResponseAssert(actual);
  }

  /**
   * Verifies that the actual ImgurResponse's data is equal to the given one.
   * @param data the given data to compare the actual ImgurResponse's data to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ImgurResponse's data is not equal to the given one.
   */
  public ImgurResponseAssert hasData(org.springframework.samples.petclinic.model.api.Data data) {
    // check that actual ImgurResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting data of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.api.Data actualData = actual.getData();
    if (!Objects.areEqual(actualData, data)) {
      failWithMessage(assertjErrorMessage, actual, data, actualData);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ImgurResponse's status is equal to the given one.
   * @param status the given status to compare the actual ImgurResponse's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ImgurResponse's status is not equal to the given one.
   */
  public ImgurResponseAssert hasStatus(Integer status) {
    // check that actual ImgurResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ImgurResponse's success is equal to the given one.
   * @param success the given success to compare the actual ImgurResponse's success to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ImgurResponse's success is not equal to the given one.
   */
  public ImgurResponseAssert hasSuccess(Boolean success) {
    // check that actual ImgurResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting success of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualSuccess = actual.getSuccess();
    if (!Objects.areEqual(actualSuccess, success)) {
      failWithMessage(assertjErrorMessage, actual, success, actualSuccess);
    }

    // return the current assertion for method chaining
    return this;
  }

}
