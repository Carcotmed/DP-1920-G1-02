package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Intervention;
import org.springframework.samples.petclinic.model.Product;

/**
 * {@link Intervention} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class InterventionAssert extends AbstractObjectAssert<InterventionAssert, Intervention> {

  /**
   * Creates a new <code>{@link InterventionAssert}</code> to make assertions on actual Intervention.
   * @param actual the Intervention we want to make assertions on.
   */
  public InterventionAssert(Intervention actual) {
    super(actual, InterventionAssert.class);
  }

  /**
   * An entry point for InterventionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myIntervention)</code> and get specific assertion with code completion.
   * @param actual the Intervention we want to make assertions on.
   * @return a new <code>{@link InterventionAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static InterventionAssert assertThat(Intervention actual) {
    return new InterventionAssert(actual);
  }

  /**
   * Verifies that the actual Intervention's id is equal to the given one.
   * @param id the given id to compare the actual Intervention's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention's id is not equal to the given one.
   */
  public InterventionAssert hasId(Integer id) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's name is equal to the given one.
   * @param name the given name to compare the actual Intervention's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention's name is not equal to the given one.
   */
  public InterventionAssert hasName(String name) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention is not new.
   */
  public InterventionAssert isNew() {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Intervention is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention is new.
   */
  public InterventionAssert isNotNew() {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Intervention is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts contains the given Product elements.
   * @param requiredProducts the given elements that should be contained in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts does not contain all given Product elements.
   */
  public InterventionAssert hasRequiredProducts(Product... requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product varargs is not null.
    if (requiredProducts == null) failWithMessage("Expecting requiredProducts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRequiredProducts(), requiredProducts);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts contains the given Product elements in Collection.
   * @param requiredProducts the given elements that should be contained in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts does not contain all given Product elements.
   */
  public InterventionAssert hasRequiredProducts(java.util.Collection<? extends Product> requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product collection is not null.
    if (requiredProducts == null) {
      failWithMessage("Expecting requiredProducts parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRequiredProducts(), requiredProducts.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts contains <b>only</b> the given Product elements and nothing else in whatever order.
   * @param requiredProducts the given elements that should be contained in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts does not contain all given Product elements.
   */
  public InterventionAssert hasOnlyRequiredProducts(Product... requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product varargs is not null.
    if (requiredProducts == null) failWithMessage("Expecting requiredProducts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRequiredProducts(), requiredProducts);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts contains <b>only</b> the given Product elements in Collection and nothing else in whatever order.
   * @param requiredProducts the given elements that should be contained in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts does not contain all given Product elements.
   */
  public InterventionAssert hasOnlyRequiredProducts(java.util.Collection<? extends Product> requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product collection is not null.
    if (requiredProducts == null) {
      failWithMessage("Expecting requiredProducts parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRequiredProducts(), requiredProducts.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts does not contain the given Product elements.
   *
   * @param requiredProducts the given elements that should not be in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts contains any given Product elements.
   */
  public InterventionAssert doesNotHaveRequiredProducts(Product... requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product varargs is not null.
    if (requiredProducts == null) failWithMessage("Expecting requiredProducts parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRequiredProducts(), requiredProducts);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's requiredProducts does not contain the given Product elements in Collection.
   *
   * @param requiredProducts the given elements that should not be in actual Intervention's requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts contains any given Product elements.
   */
  public InterventionAssert doesNotHaveRequiredProducts(java.util.Collection<? extends Product> requiredProducts) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // check that given Product collection is not null.
    if (requiredProducts == null) {
      failWithMessage("Expecting requiredProducts parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRequiredProducts(), requiredProducts.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention has no requiredProducts.
   * @return this assertion object.
   * @throws AssertionError if the actual Intervention's requiredProducts is not empty.
   */
  public InterventionAssert hasNoRequiredProducts() {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have requiredProducts but had :\n  <%s>";

    // check
    if (actual.getRequiredProducts().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRequiredProducts());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Intervention's vet is equal to the given one.
   * @param vet the given vet to compare the actual Intervention's vet to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention's vet is not equal to the given one.
   */
  public InterventionAssert hasVet(org.springframework.samples.petclinic.model.Vet vet) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting vet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Vet actualVet = actual.getVet();
    if (!Objects.areEqual(actualVet, vet)) {
      failWithMessage(assertjErrorMessage, actual, vet, actualVet);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Intervention's visit is equal to the given one.
   * @param visit the given visit to compare the actual Intervention's visit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Intervention's visit is not equal to the given one.
   */
  public InterventionAssert hasVisit(org.springframework.samples.petclinic.model.Visit visit) {
    // check that actual Intervention we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting visit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Visit actualVisit = actual.getVisit();
    if (!Objects.areEqual(actualVisit, visit)) {
      failWithMessage(assertjErrorMessage, actual, visit, actualVisit);
    }

    // return the current assertion for method chaining
    return this;
  }

}
