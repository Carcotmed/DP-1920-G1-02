package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Specialty;

/**
 * {@link Specialty} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class SpecialtyAssert extends AbstractObjectAssert<SpecialtyAssert, Specialty> {

  /**
   * Creates a new <code>{@link SpecialtyAssert}</code> to make assertions on actual Specialty.
   * @param actual the Specialty we want to make assertions on.
   */
  public SpecialtyAssert(Specialty actual) {
    super(actual, SpecialtyAssert.class);
  }

  /**
   * An entry point for SpecialtyAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySpecialty)</code> and get specific assertion with code completion.
   * @param actual the Specialty we want to make assertions on.
   * @return a new <code>{@link SpecialtyAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static SpecialtyAssert assertThat(Specialty actual) {
    return new SpecialtyAssert(actual);
  }

  /**
   * Verifies that the actual Specialty's id is equal to the given one.
   * @param id the given id to compare the actual Specialty's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Specialty's id is not equal to the given one.
   */
  public SpecialtyAssert hasId(Integer id) {
    // check that actual Specialty we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Specialty's name is equal to the given one.
   * @param name the given name to compare the actual Specialty's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Specialty's name is not equal to the given one.
   */
  public SpecialtyAssert hasName(String name) {
    // check that actual Specialty we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Specialty is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Specialty is not new.
   */
  public SpecialtyAssert isNew() {
    // check that actual Specialty we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Specialty is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Specialty is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Specialty is new.
   */
  public SpecialtyAssert isNotNew() {
    // check that actual Specialty we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Specialty is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

}
