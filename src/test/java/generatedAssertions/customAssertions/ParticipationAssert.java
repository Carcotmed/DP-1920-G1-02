package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Participation;
import org.springframework.samples.petclinic.model.Pet;

/**
 * {@link Participation} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ParticipationAssert extends AbstractObjectAssert<ParticipationAssert, Participation> {

  /**
   * Creates a new <code>{@link ParticipationAssert}</code> to make assertions on actual Participation.
   * @param actual the Participation we want to make assertions on.
   */
  public ParticipationAssert(Participation actual) {
    super(actual, ParticipationAssert.class);
  }

  /**
   * An entry point for ParticipationAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myParticipation)</code> and get specific assertion with code completion.
   * @param actual the Participation we want to make assertions on.
   * @return a new <code>{@link ParticipationAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ParticipationAssert assertThat(Participation actual) {
    return new ParticipationAssert(actual);
  }

  /**
   * Verifies that the actual Participation's event is equal to the given one.
   * @param event the given event to compare the actual Participation's event to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Participation's event is not equal to the given one.
   */
  public ParticipationAssert hasEvent(org.springframework.samples.petclinic.model.Event event) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting event of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Event actualEvent = actual.getEvent();
    if (!Objects.areEqual(actualEvent, event)) {
      failWithMessage(assertjErrorMessage, actual, event, actualEvent);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's id is equal to the given one.
   * @param id the given id to compare the actual Participation's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Participation's id is not equal to the given one.
   */
  public ParticipationAssert hasId(Integer id) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Participation is not new.
   */
  public ParticipationAssert isNew() {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Participation is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Participation is new.
   */
  public ParticipationAssert isNotNew() {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Participation is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's owner is equal to the given one.
   * @param owner the given owner to compare the actual Participation's owner to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Participation's owner is not equal to the given one.
   */
  public ParticipationAssert hasOwner(org.springframework.samples.petclinic.model.Owner owner) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting owner of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Owner actualOwner = actual.getOwner();
    if (!Objects.areEqual(actualOwner, owner)) {
      failWithMessage(assertjErrorMessage, actual, owner, actualOwner);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets contains the given Pet elements.
   * @param pets the given elements that should be contained in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets does not contain all given Pet elements.
   */
  public ParticipationAssert hasPets(Pet... pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets contains the given Pet elements in Collection.
   * @param pets the given elements that should be contained in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets does not contain all given Pet elements.
   */
  public ParticipationAssert hasPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets contains <b>only</b> the given Pet elements and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets does not contain all given Pet elements.
   */
  public ParticipationAssert hasOnlyPets(Pet... pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets contains <b>only</b> the given Pet elements in Collection and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets does not contain all given Pet elements.
   */
  public ParticipationAssert hasOnlyPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets does not contain the given Pet elements.
   *
   * @param pets the given elements that should not be in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets contains any given Pet elements.
   */
  public ParticipationAssert doesNotHavePets(Pet... pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation's pets does not contain the given Pet elements in Collection.
   *
   * @param pets the given elements that should not be in actual Participation's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets contains any given Pet elements.
   */
  public ParticipationAssert doesNotHavePets(java.util.Collection<? extends Pet> pets) {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Participation has no pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Participation's pets is not empty.
   */
  public ParticipationAssert hasNoPets() {
    // check that actual Participation we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have pets but had :\n  <%s>";

    // check
    if (actual.getPets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPets());
    }

    // return the current assertion for method chaining
    return this;
  }


}
