package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Owner;
import org.springframework.samples.petclinic.model.Pet;

/**
 * {@link Owner} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class OwnerAssert extends AbstractObjectAssert<OwnerAssert, Owner> {

  /**
   * Creates a new <code>{@link OwnerAssert}</code> to make assertions on actual Owner.
   * @param actual the Owner we want to make assertions on.
   */
  public OwnerAssert(Owner actual) {
    super(actual, OwnerAssert.class);
  }

  /**
   * An entry point for OwnerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOwner)</code> and get specific assertion with code completion.
   * @param actual the Owner we want to make assertions on.
   * @return a new <code>{@link OwnerAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static OwnerAssert assertThat(Owner actual) {
    return new OwnerAssert(actual);
  }

  /**
   * Verifies that the actual Owner's address is equal to the given one.
   * @param address the given address to compare the actual Owner's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's address is not equal to the given one.
   */
  public OwnerAssert hasAddress(String address) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAddress = actual.getAddress();
    if (!Objects.areEqual(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's city is equal to the given one.
   * @param city the given city to compare the actual Owner's city to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's city is not equal to the given one.
   */
  public OwnerAssert hasCity(String city) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCity = actual.getCity();
    if (!Objects.areEqual(actualCity, city)) {
      failWithMessage(assertjErrorMessage, actual, city, actualCity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual Owner's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's firstName is not equal to the given one.
   */
  public OwnerAssert hasFirstName(String firstName) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's id is equal to the given one.
   * @param id the given id to compare the actual Owner's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's id is not equal to the given one.
   */
  public OwnerAssert hasId(Integer id) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual Owner's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's lastName is not equal to the given one.
   */
  public OwnerAssert hasLastName(String lastName) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner is not new.
   */
  public OwnerAssert isNew() {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Owner is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner is new.
   */
  public OwnerAssert isNotNew() {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Owner is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets contains the given Pet elements.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public OwnerAssert hasPets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets contains the given Pet elements in Collection.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public OwnerAssert hasPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets contains <b>only</b> the given Pet elements and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public OwnerAssert hasOnlyPets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets contains <b>only</b> the given Pet elements in Collection and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public OwnerAssert hasOnlyPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets does not contain the given Pet elements.
   *
   * @param pets the given elements that should not be in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets contains any given Pet elements.
   */
  public OwnerAssert doesNotHavePets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's pets does not contain the given Pet elements in Collection.
   *
   * @param pets the given elements that should not be in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets contains any given Pet elements.
   */
  public OwnerAssert doesNotHavePets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner has no pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets is not empty.
   */
  public OwnerAssert hasNoPets() {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have pets but had :\n  <%s>";

    // check
    if (actual.getPets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPets());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Owner's telephone is equal to the given one.
   * @param telephone the given telephone to compare the actual Owner's telephone to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's telephone is not equal to the given one.
   */
  public OwnerAssert hasTelephone(String telephone) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting telephone of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTelephone = actual.getTelephone();
    if (!Objects.areEqual(actualTelephone, telephone)) {
      failWithMessage(assertjErrorMessage, actual, telephone, actualTelephone);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Owner's user is equal to the given one.
   * @param user the given user to compare the actual Owner's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's user is not equal to the given one.
   */
  public OwnerAssert hasUser(org.springframework.samples.petclinic.model.User user) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

}
