package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Order;

/**
 * {@link Order} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class OrderAssert extends AbstractObjectAssert<OrderAssert, Order> {

  /**
   * Creates a new <code>{@link OrderAssert}</code> to make assertions on actual Order.
   * @param actual the Order we want to make assertions on.
   */
  public OrderAssert(Order actual) {
    super(actual, OrderAssert.class);
  }

  /**
   * An entry point for OrderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOrder)</code> and get specific assertion with code completion.
   * @param actual the Order we want to make assertions on.
   * @return a new <code>{@link OrderAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static OrderAssert assertThat(Order actual) {
    return new OrderAssert(actual);
  }

  /**
   * Verifies that the actual Order's arrivalDate is equal to the given one.
   * @param arrivalDate the given arrivalDate to compare the actual Order's arrivalDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's arrivalDate is not equal to the given one.
   */
  public OrderAssert hasArrivalDate(java.time.LocalDate arrivalDate) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting arrivalDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualArrivalDate = actual.getArrivalDate();
    if (!Objects.areEqual(actualArrivalDate, arrivalDate)) {
      failWithMessage(assertjErrorMessage, actual, arrivalDate, actualArrivalDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's discount is equal to the given one.
   * @param discount the given discount to compare the actual Order's discount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's discount is not equal to the given one.
   */
  public OrderAssert hasDiscount(org.springframework.samples.petclinic.model.Discount discount) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting discount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Discount actualDiscount = actual.getDiscount();
    if (!Objects.areEqual(actualDiscount, discount)) {
      failWithMessage(assertjErrorMessage, actual, discount, actualDiscount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's id is equal to the given one.
   * @param id the given id to compare the actual Order's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's id is not equal to the given one.
   */
  public OrderAssert hasId(Integer id) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order is not new.
   */
  public OrderAssert isNew() {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Order is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order is new.
   */
  public OrderAssert isNotNew() {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Order is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's orderDate is equal to the given one.
   * @param orderDate the given orderDate to compare the actual Order's orderDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's orderDate is not equal to the given one.
   */
  public OrderAssert hasOrderDate(java.time.LocalDate orderDate) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting orderDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualOrderDate = actual.getOrderDate();
    if (!Objects.areEqual(actualOrderDate, orderDate)) {
      failWithMessage(assertjErrorMessage, actual, orderDate, actualOrderDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's product is equal to the given one.
   * @param product the given product to compare the actual Order's product to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's product is not equal to the given one.
   */
  public OrderAssert hasProduct(org.springframework.samples.petclinic.model.Product product) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting product of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Product actualProduct = actual.getProduct();
    if (!Objects.areEqual(actualProduct, product)) {
      failWithMessage(assertjErrorMessage, actual, product, actualProduct);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's provider is equal to the given one.
   * @param provider the given provider to compare the actual Order's provider to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's provider is not equal to the given one.
   */
  public OrderAssert hasProvider(org.springframework.samples.petclinic.model.Provider provider) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting provider of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Provider actualProvider = actual.getProvider();
    if (!Objects.areEqual(actualProvider, provider)) {
      failWithMessage(assertjErrorMessage, actual, provider, actualProvider);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual Order's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's quantity is not equal to the given one.
   */
  public OrderAssert hasQuantity(Integer quantity) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantity = actual.getQuantity();
    if (!Objects.areEqual(actualQuantity, quantity)) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order's sent is equal to the given one.
   * @param sent the given sent to compare the actual Order's sent to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's sent is not equal to the given one.
   */
  public OrderAssert hasSent(Boolean sent) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sent of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualSent = actual.getSent();
    if (!Objects.areEqual(actualSent, sent)) {
      failWithMessage(assertjErrorMessage, actual, sent, actualSent);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order is valid date.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order is not valid date.
   */
  public OrderAssert isValidDate() {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isValidDate()) {
      failWithMessage("\nExpecting that actual Order is valid date but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Order is not valid date.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order is valid date.
   */
  public OrderAssert isNotValidDate() {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isValidDate()) {
      failWithMessage("\nExpecting that actual Order is not valid date but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

}
