package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.api.Data;

/**
 * {@link Data} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class DataAssert extends AbstractObjectAssert<DataAssert, Data> {

  /**
   * Creates a new <code>{@link DataAssert}</code> to make assertions on actual Data.
   * @param actual the Data we want to make assertions on.
   */
  public DataAssert(Data actual) {
    super(actual, DataAssert.class);
  }

  /**
   * An entry point for DataAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myData)</code> and get specific assertion with code completion.
   * @param actual the Data we want to make assertions on.
   * @return a new <code>{@link DataAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static DataAssert assertThat(Data actual) {
    return new DataAssert(actual);
  }

  /**
   * Verifies that the actual Data's accountId is equal to the given one.
   * @param accountId the given accountId to compare the actual Data's accountId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's accountId is not equal to the given one.
   */
  public DataAssert hasAccountId(Integer accountId) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accountId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualAccountId = actual.getAccountId();
    if (!Objects.areEqual(actualAccountId, accountId)) {
      failWithMessage(assertjErrorMessage, actual, accountId, actualAccountId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's accountUrl is equal to the given one.
   * @param accountUrl the given accountUrl to compare the actual Data's accountUrl to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's accountUrl is not equal to the given one.
   */
  public DataAssert hasAccountUrl(Object accountUrl) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accountUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualAccountUrl = actual.getAccountUrl();
    if (!Objects.areEqual(actualAccountUrl, accountUrl)) {
      failWithMessage(assertjErrorMessage, actual, accountUrl, actualAccountUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's adType is equal to the given one.
   * @param adType the given adType to compare the actual Data's adType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's adType is not equal to the given one.
   */
  public DataAssert hasAdType(Integer adType) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting adType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualAdType = actual.getAdType();
    if (!Objects.areEqual(actualAdType, adType)) {
      failWithMessage(assertjErrorMessage, actual, adType, actualAdType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's adUrl is equal to the given one.
   * @param adUrl the given adUrl to compare the actual Data's adUrl to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's adUrl is not equal to the given one.
   */
  public DataAssert hasAdUrl(String adUrl) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting adUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAdUrl = actual.getAdUrl();
    if (!Objects.areEqual(actualAdUrl, adUrl)) {
      failWithMessage(assertjErrorMessage, actual, adUrl, actualAdUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's animated is equal to the given one.
   * @param animated the given animated to compare the actual Data's animated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's animated is not equal to the given one.
   */
  public DataAssert hasAnimated(Boolean animated) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting animated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualAnimated = actual.getAnimated();
    if (!Objects.areEqual(actualAnimated, animated)) {
      failWithMessage(assertjErrorMessage, actual, animated, actualAnimated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's bandwidth is equal to the given one.
   * @param bandwidth the given bandwidth to compare the actual Data's bandwidth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's bandwidth is not equal to the given one.
   */
  public DataAssert hasBandwidth(Integer bandwidth) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bandwidth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualBandwidth = actual.getBandwidth();
    if (!Objects.areEqual(actualBandwidth, bandwidth)) {
      failWithMessage(assertjErrorMessage, actual, bandwidth, actualBandwidth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's datetime is equal to the given one.
   * @param datetime the given datetime to compare the actual Data's datetime to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's datetime is not equal to the given one.
   */
  public DataAssert hasDatetime(Integer datetime) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting datetime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualDatetime = actual.getDatetime();
    if (!Objects.areEqual(actualDatetime, datetime)) {
      failWithMessage(assertjErrorMessage, actual, datetime, actualDatetime);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's deletehash is equal to the given one.
   * @param deletehash the given deletehash to compare the actual Data's deletehash to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's deletehash is not equal to the given one.
   */
  public DataAssert hasDeletehash(String deletehash) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletehash of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDeletehash = actual.getDeletehash();
    if (!Objects.areEqual(actualDeletehash, deletehash)) {
      failWithMessage(assertjErrorMessage, actual, deletehash, actualDeletehash);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's description is equal to the given one.
   * @param description the given description to compare the actual Data's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's description is not equal to the given one.
   */
  public DataAssert hasDescription(Object description) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's favorite is equal to the given one.
   * @param favorite the given favorite to compare the actual Data's favorite to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's favorite is not equal to the given one.
   */
  public DataAssert hasFavorite(Boolean favorite) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting favorite of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualFavorite = actual.getFavorite();
    if (!Objects.areEqual(actualFavorite, favorite)) {
      failWithMessage(assertjErrorMessage, actual, favorite, actualFavorite);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's height is equal to the given one.
   * @param height the given height to compare the actual Data's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's height is not equal to the given one.
   */
  public DataAssert hasHeight(Integer height) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualHeight = actual.getHeight();
    if (!Objects.areEqual(actualHeight, height)) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's id is equal to the given one.
   * @param id the given id to compare the actual Data's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's id is not equal to the given one.
   */
  public DataAssert hasId(String id) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's inGallery is equal to the given one.
   * @param inGallery the given inGallery to compare the actual Data's inGallery to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's inGallery is not equal to the given one.
   */
  public DataAssert hasInGallery(Boolean inGallery) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting inGallery of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualInGallery = actual.getInGallery();
    if (!Objects.areEqual(actualInGallery, inGallery)) {
      failWithMessage(assertjErrorMessage, actual, inGallery, actualInGallery);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's inMostViral is equal to the given one.
   * @param inMostViral the given inMostViral to compare the actual Data's inMostViral to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's inMostViral is not equal to the given one.
   */
  public DataAssert hasInMostViral(Boolean inMostViral) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting inMostViral of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualInMostViral = actual.getInMostViral();
    if (!Objects.areEqual(actualInMostViral, inMostViral)) {
      failWithMessage(assertjErrorMessage, actual, inMostViral, actualInMostViral);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's isAd is equal to the given one.
   * @param isAd the given isAd to compare the actual Data's isAd to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's isAd is not equal to the given one.
   */
  public DataAssert hasIsAd(Boolean isAd) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting isAd of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIsAd = actual.getIsAd();
    if (!Objects.areEqual(actualIsAd, isAd)) {
      failWithMessage(assertjErrorMessage, actual, isAd, actualIsAd);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's link is equal to the given one.
   * @param link the given link to compare the actual Data's link to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's link is not equal to the given one.
   */
  public DataAssert hasLink(String link) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting link of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLink = actual.getLink();
    if (!Objects.areEqual(actualLink, link)) {
      failWithMessage(assertjErrorMessage, actual, link, actualLink);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's name is equal to the given one.
   * @param name the given name to compare the actual Data's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's name is not equal to the given one.
   */
  public DataAssert hasName(String name) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's nsfw is equal to the given one.
   * @param nsfw the given nsfw to compare the actual Data's nsfw to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's nsfw is not equal to the given one.
   */
  public DataAssert hasNsfw(Object nsfw) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nsfw of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualNsfw = actual.getNsfw();
    if (!Objects.areEqual(actualNsfw, nsfw)) {
      failWithMessage(assertjErrorMessage, actual, nsfw, actualNsfw);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's section is equal to the given one.
   * @param section the given section to compare the actual Data's section to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's section is not equal to the given one.
   */
  public DataAssert hasSection(Object section) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting section of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualSection = actual.getSection();
    if (!Objects.areEqual(actualSection, section)) {
      failWithMessage(assertjErrorMessage, actual, section, actualSection);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's size is equal to the given one.
   * @param size the given size to compare the actual Data's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's size is not equal to the given one.
   */
  public DataAssert hasSize(Integer size) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualSize = actual.getSize();
    if (!Objects.areEqual(actualSize, size)) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags contains the given Object elements.
   * @param tags the given elements that should be contained in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags does not contain all given Object elements.
   */
  public DataAssert hasTags(Object... tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags contains the given Object elements in Collection.
   * @param tags the given elements that should be contained in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags does not contain all given Object elements.
   */
  public DataAssert hasTags(java.util.Collection<? extends Object> tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object collection is not null.
    if (tags == null) {
      failWithMessage("Expecting tags parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTags(), tags.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags contains <b>only</b> the given Object elements and nothing else in whatever order.
   * @param tags the given elements that should be contained in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags does not contain all given Object elements.
   */
  public DataAssert hasOnlyTags(Object... tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags contains <b>only</b> the given Object elements in Collection and nothing else in whatever order.
   * @param tags the given elements that should be contained in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags does not contain all given Object elements.
   */
  public DataAssert hasOnlyTags(java.util.Collection<? extends Object> tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object collection is not null.
    if (tags == null) {
      failWithMessage("Expecting tags parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTags(), tags.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags does not contain the given Object elements.
   *
   * @param tags the given elements that should not be in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags contains any given Object elements.
   */
  public DataAssert doesNotHaveTags(Object... tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's tags does not contain the given Object elements in Collection.
   *
   * @param tags the given elements that should not be in actual Data's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags contains any given Object elements.
   */
  public DataAssert doesNotHaveTags(java.util.Collection<? extends Object> tags) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // check that given Object collection is not null.
    if (tags == null) {
      failWithMessage("Expecting tags parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTags(), tags.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data has no tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Data's tags is not empty.
   */
  public DataAssert hasNoTags() {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have tags but had :\n  <%s>";

    // check
    if (actual.getTags().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTags());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual Data's title is equal to the given one.
   * @param title the given title to compare the actual Data's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's title is not equal to the given one.
   */
  public DataAssert hasTitle(Object title) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's type is equal to the given one.
   * @param type the given type to compare the actual Data's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's type is not equal to the given one.
   */
  public DataAssert hasType(String type) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's views is equal to the given one.
   * @param views the given views to compare the actual Data's views to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's views is not equal to the given one.
   */
  public DataAssert hasViews(Integer views) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting views of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualViews = actual.getViews();
    if (!Objects.areEqual(actualViews, views)) {
      failWithMessage(assertjErrorMessage, actual, views, actualViews);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's vote is equal to the given one.
   * @param vote the given vote to compare the actual Data's vote to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's vote is not equal to the given one.
   */
  public DataAssert hasVote(Object vote) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting vote of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualVote = actual.getVote();
    if (!Objects.areEqual(actualVote, vote)) {
      failWithMessage(assertjErrorMessage, actual, vote, actualVote);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Data's width is equal to the given one.
   * @param width the given width to compare the actual Data's width to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Data's width is not equal to the given one.
   */
  public DataAssert hasWidth(Integer width) {
    // check that actual Data we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualWidth = actual.getWidth();
    if (!Objects.areEqual(actualWidth, width)) {
      failWithMessage(assertjErrorMessage, actual, width, actualWidth);
    }

    // return the current assertion for method chaining
    return this;
  }

}
