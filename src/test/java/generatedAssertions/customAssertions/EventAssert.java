package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Event;

/**
 * {@link Event} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class EventAssert extends AbstractObjectAssert<EventAssert, Event> {

  /**
   * Creates a new <code>{@link EventAssert}</code> to make assertions on actual Event.
   * @param actual the Event we want to make assertions on.
   */
  public EventAssert(Event actual) {
    super(actual, EventAssert.class);
  }

  /**
   * An entry point for EventAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myEvent)</code> and get specific assertion with code completion.
   * @param actual the Event we want to make assertions on.
   * @return a new <code>{@link EventAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static EventAssert assertThat(Event actual) {
    return new EventAssert(actual);
  }

  /**
   * Verifies that the actual Event's capacity is equal to the given one.
   * @param capacity the given capacity to compare the actual Event's capacity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's capacity is not equal to the given one.
   */
  public EventAssert hasCapacity(Integer capacity) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting capacity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCapacity = actual.getCapacity();
    if (!Objects.areEqual(actualCapacity, capacity)) {
      failWithMessage(assertjErrorMessage, actual, capacity, actualCapacity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's date is equal to the given one.
   * @param date the given date to compare the actual Event's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's date is not equal to the given one.
   */
  public EventAssert hasDate(java.time.LocalDate date) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualDate = actual.getDate();
    if (!Objects.areEqual(actualDate, date)) {
      failWithMessage(assertjErrorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's description is equal to the given one.
   * @param description the given description to compare the actual Event's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's description is not equal to the given one.
   */
  public EventAssert hasDescription(String description) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's id is equal to the given one.
   * @param id the given id to compare the actual Event's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's id is not equal to the given one.
   */
  public EventAssert hasId(Integer id) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event is not new.
   */
  public EventAssert isNew() {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Event is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event is new.
   */
  public EventAssert isNotNew() {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Event is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's place is equal to the given one.
   * @param place the given place to compare the actual Event's place to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's place is not equal to the given one.
   */
  public EventAssert hasPlace(String place) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting place of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPlace = actual.getPlace();
    if (!Objects.areEqual(actualPlace, place)) {
      failWithMessage(assertjErrorMessage, actual, place, actualPlace);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's published is equal to the given one.
   * @param published the given published to compare the actual Event's published to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's published is not equal to the given one.
   */
  public EventAssert hasPublished(Boolean published) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting published of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualPublished = actual.getPublished();
    if (!Objects.areEqual(actualPublished, published)) {
      failWithMessage(assertjErrorMessage, actual, published, actualPublished);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Event's sponsor is equal to the given one.
   * @param sponsor the given sponsor to compare the actual Event's sponsor to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Event's sponsor is not equal to the given one.
   */
  public EventAssert hasSponsor(org.springframework.samples.petclinic.model.Provider sponsor) {
    // check that actual Event we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sponsor of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Provider actualSponsor = actual.getSponsor();
    if (!Objects.areEqual(actualSponsor, sponsor)) {
      failWithMessage(assertjErrorMessage, actual, sponsor, actualSponsor);
    }

    // return the current assertion for method chaining
    return this;
  }

}
