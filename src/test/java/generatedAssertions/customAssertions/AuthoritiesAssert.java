package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Authorities;

/**
 * {@link Authorities} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class AuthoritiesAssert extends AbstractObjectAssert<AuthoritiesAssert, Authorities> {

  /**
   * Creates a new <code>{@link AuthoritiesAssert}</code> to make assertions on actual Authorities.
   * @param actual the Authorities we want to make assertions on.
   */
  public AuthoritiesAssert(Authorities actual) {
    super(actual, AuthoritiesAssert.class);
  }

  /**
   * An entry point for AuthoritiesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myAuthorities)</code> and get specific assertion with code completion.
   * @param actual the Authorities we want to make assertions on.
   * @return a new <code>{@link AuthoritiesAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static AuthoritiesAssert assertThat(Authorities actual) {
    return new AuthoritiesAssert(actual);
  }

  /**
   * Verifies that the actual Authorities's authority is equal to the given one.
   * @param authority the given authority to compare the actual Authorities's authority to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Authorities's authority is not equal to the given one.
   */
  public AuthoritiesAssert hasAuthority(String authority) {
    // check that actual Authorities we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting authority of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAuthority = actual.getAuthority();
    if (!Objects.areEqual(actualAuthority, authority)) {
      failWithMessage(assertjErrorMessage, actual, authority, actualAuthority);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Authorities's username is equal to the given one.
   * @param username the given username to compare the actual Authorities's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Authorities's username is not equal to the given one.
   */
  public AuthoritiesAssert hasUsername(String username) {
    // check that actual Authorities we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return this;
  }

}
