package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Specialty;
import org.springframework.samples.petclinic.model.Vet;

/**
 * {@link Vet} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class VetAssert extends AbstractObjectAssert<VetAssert, Vet> {

  /**
   * Creates a new <code>{@link VetAssert}</code> to make assertions on actual Vet.
   * @param actual the Vet we want to make assertions on.
   */
  public VetAssert(Vet actual) {
    super(actual, VetAssert.class);
  }

  /**
   * An entry point for VetAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myVet)</code> and get specific assertion with code completion.
   * @param actual the Vet we want to make assertions on.
   * @return a new <code>{@link VetAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static VetAssert assertThat(Vet actual) {
    return new VetAssert(actual);
  }

  /**
   * Verifies that the actual Vet's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual Vet's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's firstName is not equal to the given one.
   */
  public VetAssert hasFirstName(String firstName) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's id is equal to the given one.
   * @param id the given id to compare the actual Vet's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's id is not equal to the given one.
   */
  public VetAssert hasId(Integer id) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual Vet's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's lastName is not equal to the given one.
   */
  public VetAssert hasLastName(String lastName) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet is new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet is not new.
   */
  public VetAssert isNew() {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isNew()) {
      failWithMessage("\nExpecting that actual Vet is new but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet is not new.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet is new.
   */
  public VetAssert isNotNew() {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isNew()) {
      failWithMessage("\nExpecting that actual Vet is not new but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's nrOfSpecialties is equal to the given one.
   * @param nrOfSpecialties the given nrOfSpecialties to compare the actual Vet's nrOfSpecialties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's nrOfSpecialties is not equal to the given one.
   */
  public VetAssert hasNrOfSpecialties(int nrOfSpecialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nrOfSpecialties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNrOfSpecialties = actual.getNrOfSpecialties();
    if (actualNrOfSpecialties != nrOfSpecialties) {
      failWithMessage(assertjErrorMessage, actual, nrOfSpecialties, actualNrOfSpecialties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties contains the given Specialty elements.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public VetAssert hasSpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties contains the given Specialty elements in Collection.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public VetAssert hasSpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties contains <b>only</b> the given Specialty elements and nothing else in whatever order.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public VetAssert hasOnlySpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties contains <b>only</b> the given Specialty elements in Collection and nothing else in whatever order.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public VetAssert hasOnlySpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties does not contain the given Specialty elements.
   *
   * @param specialties the given elements that should not be in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties contains any given Specialty elements.
   */
  public VetAssert doesNotHaveSpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet's specialties does not contain the given Specialty elements in Collection.
   *
   * @param specialties the given elements that should not be in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties contains any given Specialty elements.
   */
  public VetAssert doesNotHaveSpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Vet has no specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties is not empty.
   */
  public VetAssert hasNoSpecialties() {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have specialties but had :\n  <%s>";

    // check
    if (actual.getSpecialties().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSpecialties());
    }

    // return the current assertion for method chaining
    return this;
  }


}
